from Map import Map
from Piece import Piece
import itertools
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt
import geopandas as gpd
from shapely.geometry import Polygon, LineString
import csv
import time

class Graph:
    def __init__(self, map: Map, pieces: list, piece_displacement: tuple = (0,0)):
        self.fig, self.ax = plt.subplots()
        self.ax.set_xticks([0,5,10,15])
        self.ax.set_yticks([0,5,10,15])
        self.map = map
        self.border = map.border
        self.pieces = pieces
        self.animation = None
        self.current_piece_index = 0
        self.total_pieces_placed = 2 + len(self.map.invisible_lines)
        #self.displace_pieces(piece_displacement)
    """
    SETS PIECES OUTSIDE OF MAP
    """
    def fill_perimater(self):
        """
        for each piece, determine whether it can fit at the try_point 0,0
        if if can, keep going with this piece, updating the try_point and testing pieces until completing the perimater
        create a new Map with the perimater filled (it would be a smaller version of the previous map)
        repeat until all pieces are filled

        
        """
        #generated by chatgpt
        def on_line(point_a, point_b, check_point):
            # Calculate the cross product and dot product
            cross_product = (check_point[1] - point_a[1]) * (point_b[0] - point_a[0]) - (point_b[1] - point_a[1]) * (check_point[0] - point_a[0])
            dot_product = (check_point[0] - point_a[0]) * (point_b[0] - point_a[0]) + (check_point[1] - point_a[1]) * (point_b[1] - point_a[1])

            # Check if the points are collinear and if check_point is between point_a and point_b
            if abs(cross_product) < 0.001 and dot_product >= 0 and dot_product <= (point_b[0] - point_a[0]) * (point_b[0] - point_a[0]) + (point_b[1] - point_a[1]) * (point_b[1] - point_a[1]):
                return True

            return False

        count = 0 
        for piece in self.pieces:
            for orientation in piece.orientations:
                cur_orientation = gpd.GeoSeries(Polygon(orientation.coordinates))
                cur_orientation.plot(ax=self.ax)

                # UNKOWN WHY THE CODE BELOW WORKS
                if cur_orientation.touches(self.border, align=True).bool():
                    for i in range(len(self.map.coordinates)-1):
                        for coordinate in orientation.coordinates:
                            print(coordinate)
                            print('\n\n\n')
                            if on_line(self.map.coordinates[i], self.map.coordinates[i+1], coordinate):
                                pass
                            else:
                                print(coordinate)
                else:
                    self.ax.collections[-1].remove()


    def animate(self, interval: int = 100):
        def update(obj):
            if len(self.ax.collections) > self.total_pieces_placed:
                self.ax.collections[self.total_pieces_placed-self.current_piece_index].remove()
            obj.plot(ax=self.ax, color='red')
        ani = FuncAnimation(self.fig, update, frames=list(itertools.chain.from_iterable([obj.get_orientations() for obj in self.pieces])), interval=interval)


    def plot_map(self):
        for line in self.map.invisible_lines:
            gpd.GeoSeries(line).plot(ax=self.ax, color='purple')
        gpd.GeoSeries(self.map.map).plot(ax = self.ax, color='blue')
        self.border = gpd.GeoSeries(self.map.border)
        self.border.plot(ax = self.ax, color='red')

    
    def display_graph(self, animate: bool = False):
        if animate:
            self.animate()
        
        plt.show(block = True)

    def displace_pieces(self, displacement):
        for piece in self.pieces:
            for orientation in piece:
                for coordinate in orientation.coordinates:
                    coordinate[0] += displacement[0]
                    coordinate[1] += displacement[1]



#        def update(obj):
#            obj.plot(ax=self.ax, color='red')
#            if len(self.ax.collections) > 2:
#                print(self.current_piece_index)
#                self.ax.collections[2-self.current_piece_index].remove()