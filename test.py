from Map import Map
from Piece import Piece
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt
import geopandas as gpd
from shapely.geometry import Polygon, LineString
from Graph import Graph
import csv

#generated by chatgpt
def on_line(point_a, point_b, point_c):
    # Calculate the cross product and dot product
    cross_product = (point_c[1] - point_a[1]) * (point_b[0] - point_a[0]) - (point_b[1] - point_a[1]) * (point_c[0] - point_a[0])
    dot_product = (point_c[0] - point_a[0]) * (point_b[0] - point_a[0]) + (point_c[1] - point_a[1]) * (point_b[1] - point_a[1])

    # Check if the points are collinear and if point_c is between point_a and point_b
    if abs(cross_product) < 0.001 and dot_product >= 0 and dot_product <= (point_b[0] - point_a[0]) * (point_b[0] - point_a[0]) + (point_b[1] - point_a[1]) * (point_b[1] - point_a[1]):
        return True

    return False

my_map = Map(['e','n','e','n','w','s'], [8,3,4,7,12,10])
my_graph = Graph(my_map, [Piece(2,6),Piece(6,3),Piece(10,2),Piece(5,6),Piece(5,6)])
my_graph.plot_map()
for i in range(len(my_graph.map.coordinates)-1):
    if on_line(my_graph.map.coordinates[i], my_graph.map.coordinates[i+1], (0,3)):
        print(my_graph.map.coordinates[i])
        print(my_graph.map.coordinates[i+1])
        print((0,3))
        print('\n\n')
        gpd.GeoSeries(LineString([my_graph.map.coordinates[i], my_graph.map.coordinates[i+1]])).plot(ax=my_graph.ax)
my_graph.display_graph()
    



"""
fig, ax = plt.subplots()
xdata, ydata = [], []
ln, = ax.plot([], [], 'ro')

def init():
    print("hello")
    ax.clear()
    ax.set_xlim(0, 2*np.pi)
    ax.set_ylim(-1, 1)
    return ln,

def update(frame):
    xdata.append(frame)
    ydata.append(np.sin(frame))
    ln.set_data(xdata, ydata)
    return ln,

ani = FuncAnimation(fig, update, frames=np.linspace(0, 2*np.pi, 128),
                    init_func=init, blit=True,repeat=True, interval=1)
plt.show()

"""

